#!/usr/bin/env bash
# A front end to run games easily.

set -e

# store args globally for the lol
args=("$@")

# All games in category then submission order, as in README.
# (leave 0th element empty)
games=(
""
prelude/guess1/guess1.hs
prelude/pure-doors/pure-doors.hs
prelude/fifteen/fifteen.hs
prelude/chess/chess.hs
prelude/sudoku/sudoku.hs
prelude/matchmaking/matchmaking.hs
prelude/tiny-brot/tiny-brot.hs
prelude/mini-othello/mini-othello.hs
prelude/one-dot/one-dot.hs
prelude/expressit/expressit.hs
prelude/life/life.hs
base/timing/timing.hs
base/shoot/shoot.hs
base/log2048/log2048.hs
base/rhythm/rhythm.hs
base/peyton-says/peyton-says.hs
base/acey-deucey/acey-deucey.hs
base/flower-seeds/flower-seeds.hs
base/lambda-ray/lambda-ray.hs
default/type-and-furious/type-and-furious.hs
default/shmupemup/shmupemup.hs
default/tsp/tsp.hs
default/lol/lol.hs
hackage/guess2/guess2.hs
hackage/wordle/wordle.hs
hackage/ski/ski.hs
hackage/guesscolor/guesscolor.hs
hackage/bulls-n-cows/bulls-n-cows.hs
hackage/hallway-to-hell/hallway-to-hell.hs
hackage/1234-hero/1234-hero.hs
hackage/crappy-flappy/crappy-flappy.hs
hackage/pong/pong.hs
hackage/minesweeper/minesweeper.hs
hackage/pong2/pong2.hs
hackage/brickbreaker/brickbreaker.hs
hackage/lazy-march/lazy-march.hs
hackage/balances/balances.hs
hackage/vaders/vaders.hs
hackage/tetris/tetris.hs
hackage/short-guess/short-guess.hs
hackage/7up7down/7up7down.hs
)

# Games needing special invocation, in alphabetical order.

fifteen()           { runghc -XPatternSynonyms -XLambdaCase "$1"; }
brickbreaker()      { stack script --compile --resolver lts-20 --package gloss "$1"; }
hallway-to-hell()   { stack runghc --resolver lts-20 --package random --package rio "$1"; }
lambda-ray()        { stack script --resolver lts-20 --optimize "$1"; }
life()              { runghc "$1"; }
log2048()           { runghc "$1"; }
lol()               { stack script --resolver lts-20 --optimize --package process --package text -- "$1" "${args[@]}"; }
matchmaking()       { runghc -cpp -DD='a=replicate;b=putStrLn;c=length;p=map;u=max(2)' "$1"; }
mini-othello()      { runghc "$1"; }
pong2()             { stack runghc --resolver lts-20 --package ansi-terminal-game "$1"; }
shmupemup()         { cd "$(dirname "$1")" || exit 1; stack runghc --package parsec "$(basename "$1")"; }
short-guess()       { stack runghc --resolver lts-20 --package random "$1"; }
sudoku()            { runghc "$1"; }
tsp()               { runghc "$1"; }

# Help
printTitle() {
    printf '%0.1s' "="{1..80};echo
    echo "= " "$1"
    printf '%0.1s' "="{1..80};echo
}
gamecat()  { echo "$1" | cut -d/ -f1; }
gamename() { basename "$1" .hs; }
help() {
    cat <<HERE
--------------------------------------------------------
                 ___         __
|__| _  _|  _||   | . _     / _  _  _  _    | _  _    /|
|  |(_|_)|((-||   | || )\/  \__)(_||||(-  __)(_||||    |

--------------------------------------------------------
Here are the entries from HTGJ1, Feb 2023 !
This script can run each game for you, using ghc or stack.
If you don't have these yet, see https://www.haskell.org/get-started .
Usage: play [NUM|NAME|SUBSTR]

HERE
    for k in "${!games[@]}"; do
	[[ $k == 0 ]] && continue
	g="${games[$k]}"
	printf "%2d) %-20s  %s\n" "$k" "$(gamename "$g")" "[$(gamecat "$g")]"
    done
    echo
}

# Select Game
declare -A gamesbyname
for g in "${games[@]}"; do
    [[ -z $g ]] && continue
    gamesbyname["$(gamename "$g")"]=$g
done
selectGame() {
    local g
    # select by num
    if [[ "$1" =~ ^[0-9]+$ ]];then
        g=${games[$1]}
    fi
    # select by game name
    if [[ -z $g ]]; then g=${gamesbyname[$1]}; fi
    # select by game name matching
    if [[ -z $g ]]; then
	  for h in "${games[@]}"; do
	      if [[ $(gamename "$h") =~ $1 ]]; then g="$h"; break; fi
	  done
    fi
    # no match
    if [[ -z $g ]]; then echo "$1 is unrecognised, run '$0' to see the list"; exit 1; fi
    echo "$g"
}

# Main
cd "$(dirname "${BASH_SOURCE[0]}")" || exit 1
if [[ $# == 0 || "$1" == "-h" ||  "$1" == "--help" ]];then
    help
elif [[ "$2" == "-h" ||  "$2" == "--help" ]];then
    g=$(selectGame "$1")
    gi=$(echo "$(dirname "$g")"/Import*.hs)
    echo "$gi"
    gh=$(echo "$(dirname "$g")"/README*)
    {
        if [[ -f "$gi" ]];then
            printTitle "$gi"
            cat "$gi"
        fi
        printTitle "$g"
        cat "$g"
        if [[ -f "$gh" ]];then
            printTitle "$gh"
            cat "$gh"
        fi
    } | ${PAGPER:-less};
else
    g=$(selectGame "$1")
    gname=$(gamename "$g")
    # run it through a launcher, or directly with shebang
    if declare -f "$gname" >/dev/null
    then "$gname" "$g"
    else $g
    fi
fi
